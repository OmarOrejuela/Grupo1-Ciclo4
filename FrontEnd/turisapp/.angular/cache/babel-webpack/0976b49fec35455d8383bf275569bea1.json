{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Personal/Documents/GitHub/Grupo1-Ciclo4/FrontEnd/turisapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RegionService {\n  constructor(http) {\n    this.http = http;\n    this.URL_BASE = environment.API_URL;\n  }\n\n  InsertRecord(data) {\n    return this.http.post(`${this.URL_BASE}regiones`, data);\n  }\n\n  UpdateRecord(data, id) {\n    return this.http.put(`${this.URL_BASE}regiones/${id}`, data);\n  }\n\n  DeleteRecord(id) {\n    return this.http.delete(`${this.URL_BASE}regiones/${id}`);\n  }\n\n  SearchRecord(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(`${_this.URL_BASE}regiones/${id}`);\n      return yield response.json();\n    })();\n  }\n\n  LisrRecord() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(`${_this2.URL_BASE}regiones`);\n      return yield response.json();\n    })();\n  }\n\n}\n\nRegionService.ɵfac = function RegionService_Factory(t) {\n  return new (t || RegionService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nRegionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RegionService,\n  factory: RegionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Personal/Documents/GitHub/Grupo1-Ciclo4/FrontEnd/turisapp/src/app/services/region.service.ts"],"names":["environment","i0","i1","RegionService","constructor","http","URL_BASE","API_URL","InsertRecord","data","post","UpdateRecord","id","put","DeleteRecord","delete","SearchRecord","response","fetch","json","LisrRecord","ɵfac","RegionService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBN,WAAW,CAACO,OAA5B;AACH;;AACDC,EAAAA,YAAY,CAACC,IAAD,EAAO;AACf,WAAO,KAAKJ,IAAL,CAAUK,IAAV,CAAgB,GAAE,KAAKJ,QAAS,UAAhC,EAA2CG,IAA3C,CAAP;AACH;;AACDE,EAAAA,YAAY,CAACF,IAAD,EAAOG,EAAP,EAAW;AACnB,WAAO,KAAKP,IAAL,CAAUQ,GAAV,CAAe,GAAE,KAAKP,QAAS,YAAWM,EAAG,EAA7C,EAAgDH,IAAhD,CAAP;AACH;;AACDK,EAAAA,YAAY,CAACF,EAAD,EAAK;AACb,WAAO,KAAKP,IAAL,CAAUU,MAAV,CAAkB,GAAE,KAAKT,QAAS,YAAWM,EAAG,EAAhD,CAAP;AACH;;AACKI,EAAAA,YAAY,CAACJ,EAAD,EAAK;AAAA;;AAAA;AACnB,YAAMK,QAAQ,SAASC,KAAK,CAAE,GAAE,KAAI,CAACZ,QAAS,YAAWM,EAAG,EAAhC,CAA5B;AACA,mBAAaK,QAAQ,CAACE,IAAT,EAAb;AAFmB;AAGtB;;AACKC,EAAAA,UAAU,GAAG;AAAA;;AAAA;AACf,YAAMH,QAAQ,SAASC,KAAK,CAAE,GAAE,MAAI,CAACZ,QAAS,UAAlB,CAA5B;AACA,mBAAaW,QAAQ,CAACE,IAAT,EAAb;AAFe;AAGlB;;AArBsB;;AAuB3BhB,aAAa,CAACkB,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAIpB,aAAV,EAAyBF,EAAE,CAACuB,QAAH,CAAYtB,EAAE,CAACuB,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACAtB,aAAa,CAACuB,KAAd,GAAsB,aAAczB,EAAE,CAAC0B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzB,aAAT;AAAwB0B,EAAAA,OAAO,EAAE1B,aAAa,CAACkB,IAA/C;AAAqDS,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class RegionService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.URL_BASE = environment.API_URL;\r\n    }\r\n    InsertRecord(data) {\r\n        return this.http.post(`${this.URL_BASE}regiones`, data);\r\n    }\r\n    UpdateRecord(data, id) {\r\n        return this.http.put(`${this.URL_BASE}regiones/${id}`, data);\r\n    }\r\n    DeleteRecord(id) {\r\n        return this.http.delete(`${this.URL_BASE}regiones/${id}`);\r\n    }\r\n    async SearchRecord(id) {\r\n        const response = await fetch(`${this.URL_BASE}regiones/${id}`);\r\n        return await response.json();\r\n    }\r\n    async LisrRecord() {\r\n        const response = await fetch(`${this.URL_BASE}regiones`);\r\n        return await response.json();\r\n    }\r\n}\r\nRegionService.ɵfac = function RegionService_Factory(t) { return new (t || RegionService)(i0.ɵɵinject(i1.HttpClient)); };\r\nRegionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RegionService, factory: RegionService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}